// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Twenty_Crm_Infratstructure.Persistence.Db;

#nullable disable

namespace Twenty_Crm_Infratstructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240211124615_Removed fields from user")]
    partial class Removedfieldsfromuser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PostUser", b =>
                {
                    b.Property<Guid>("PostsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("PostUser");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Address.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alley")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("CityRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("RegionOrVilageName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("UserRef")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CityRef");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CountyId");

                    b.HasIndex("UserRef");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Bank.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Bank.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("AccountNumber")
                        .HasMaxLength(150)
                        .HasColumnType("int");

                    b.Property<int>("AccountyType")
                        .HasColumnType("int");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("BranchRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MoneyType")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BranchRef");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Bank.BankBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<Guid>("BankRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<int>("BranchCode")
                        .HasColumnType("int");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CityRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Fax")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BankRef");

                    b.HasIndex("CityId");

                    b.ToTable("BankBranches");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Company.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<string>("BrandName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CompanyEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CountyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EconomicalNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertNumber")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("TitleRef")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Company.CompanyToCustomer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("CompanyRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<Guid>("CustomerRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyRef");

                    b.HasIndex("CustomerRef");

                    b.ToTable("CompanyToCustomers");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Company.CompanyToUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("CompanyRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserRef")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyRef");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyToUsers");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Telephone.Mobile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OperatorRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserRef")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OperatorRef");

                    b.HasIndex("UserId");

                    b.ToTable("Mobiles");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Telephone.Operator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Telephone.Telephone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BankBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("CityRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<int>("MobileType")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OperatorRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TelephoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserRef")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BankBranchId");

                    b.HasIndex("CityRef");

                    b.HasIndex("CompanyId");

                    b.HasIndex("OperatorRef");

                    b.HasIndex("UserRef");

                    b.ToTable("Telephones");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Group.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<Guid?>("CreatedCompany")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GroupLeaders");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Group.SubGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<Guid>("GroupLeaderRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GroupLeaderRef");

                    b.ToTable("SubGroups");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Group.UserToGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<Guid?>("GropuRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserRef")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GropuRef");

                    b.HasIndex("UserRef");

                    b.ToTable("UserToGroup");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.InternationalCertificate.InternationalCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("UserRef")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserRef");

                    b.ToTable("InternationalCertificates");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.License.License", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserRef")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserRef");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Marriage.Marriage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("DateOfDivorce")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfMarriage")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("NumberOfChildren")
                        .HasColumnType("tinyint");

                    b.Property<string>("SpouseName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("UserRef")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserRef");

                    b.ToTable("Marriages");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Passport.Passport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ExpierDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserRef")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserRef");

                    b.ToTable("Passports");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Post.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Region.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountyRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TelCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CountyRef");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Region.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<string>("Continent")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("DomainName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("EnglishAdjective")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("EnglishNationName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LanguageName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersianAdjective")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PersianName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PersianNationName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TelCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Region.County", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("StateRef")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StateRef");

                    b.ToTable("Counties");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Region.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("CountryRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CountryRef");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Religion.Religion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Skill.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<string>("CertificateFileAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("UserRef")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserRef");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Title.Title", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("CompanyRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<bool>("IsLegal")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyRef")
                        .IsUnique();

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.User.Claim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.User.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.User.RoleToClaims", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("ClaimRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleRef")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClaimRef");

                    b.HasIndex("RoleRef");

                    b.ToTable("RoleToClaims");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CompanyCreated")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<Guid?>("CreatedCompany")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("DateOfBirth")
                        .HasColumnType("bigint");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FatherName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(170)
                        .HasColumnType("nvarchar(170)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("HashedPassword")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("Housing")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(170)
                        .HasColumnType("nvarchar(170)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<Guid?>("PayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RefreshTokenExpire")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReligionRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReligionRef");

                    b.HasIndex("SubGroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.User.UserBodyInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("Height")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Weight")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("UserRef");

                    b.ToTable("UserBodyInformation");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.User.UserToRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RoleRef")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserRef")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleRef");

                    b.HasIndex("UserRef");

                    b.ToTable("UserToRoles");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Website.Website", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("CompanyRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserRef")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyRef");

                    b.HasIndex("UserRef");

                    b.ToTable("Websites");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.WorkPlace.WorkPlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("CompanyRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyRef");

                    b.ToTable("WorkPlaces");
                });

            modelBuilder.Entity("UserWorkPlace", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkPlacesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "WorkPlacesId");

                    b.HasIndex("WorkPlacesId");

                    b.ToTable("UserWorkPlace");
                });

            modelBuilder.Entity("PostUser", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.Post.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Twenty_Crm_Domain.Entities.User.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Address.Address", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.Address.Address", null)
                        .WithMany("Addresses")
                        .HasForeignKey("AddressId");

                    b.HasOne("Twenty_Crm_Domain.Entities.Region.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Twenty_Crm_Domain.Entities.Company.Company", null)
                        .WithMany("Addresses")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Twenty_Crm_Domain.Entities.Region.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Twenty_Crm_Domain.Entities.Region.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyId");

                    b.HasOne("Twenty_Crm_Domain.Entities.User.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("County");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Bank.BankAccount", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.Bank.BankBranch", "Branch")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BranchRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Twenty_Crm_Domain.Entities.Company.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Twenty_Crm_Domain.Entities.User.User", null)
                        .WithMany("BankAccounts")
                        .HasForeignKey("UserId");

                    b.Navigation("Branch");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Bank.BankBranch", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.Bank.Bank", "Bank")
                        .WithMany("BankBranches")
                        .HasForeignKey("BankRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Twenty_Crm_Domain.Entities.Region.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.Navigation("Bank");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Company.Company", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.Region.County", null)
                        .WithMany("Companies")
                        .HasForeignKey("CountyId");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Company.CompanyToCustomer", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.Company.Company", "Company")
                        .WithMany("CompanyToCustomer")
                        .HasForeignKey("CompanyRef")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Twenty_Crm_Domain.Entities.Company.Company", "Customer")
                        .WithMany("CustomerToCompany")
                        .HasForeignKey("CustomerRef")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Company.CompanyToUser", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.Company.Company", "Company")
                        .WithMany("CompanyToUser")
                        .HasForeignKey("CompanyRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Twenty_Crm_Domain.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Telephone.Mobile", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.Telephone.Operator", "Operator")
                        .WithMany("Mobiles")
                        .HasForeignKey("OperatorRef")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Twenty_Crm_Domain.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Operator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Telephone.Telephone", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.Bank.BankBranch", null)
                        .WithMany("Telephones")
                        .HasForeignKey("BankBranchId");

                    b.HasOne("Twenty_Crm_Domain.Entities.Region.City", "City")
                        .WithMany("Telephones")
                        .HasForeignKey("CityRef")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Twenty_Crm_Domain.Entities.Company.Company", null)
                        .WithMany("Telephones")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Twenty_Crm_Domain.Entities.Telephone.Operator", "Operator")
                        .WithMany("Telephones")
                        .HasForeignKey("OperatorRef")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Twenty_Crm_Domain.Entities.User.User", "User")
                        .WithMany("Telephones")
                        .HasForeignKey("UserRef")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("City");

                    b.Navigation("Operator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Group.Group", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.User.User", null)
                        .WithMany("GroupLeaders")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Group.SubGroup", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.Group.Group", "GroupLeader")
                        .WithMany("SubGroups")
                        .HasForeignKey("GroupLeaderRef")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("GroupLeader");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Group.UserToGroup", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.Group.Group", "Group")
                        .WithMany("UserToGroups")
                        .HasForeignKey("GropuRef");

                    b.HasOne("Twenty_Crm_Domain.Entities.User.User", "User")
                        .WithMany("UserToGroups")
                        .HasForeignKey("UserRef");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.InternationalCertificate.InternationalCertificate", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.User.User", "User")
                        .WithMany("InternationalCertificates")
                        .HasForeignKey("UserRef")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.License.License", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.User.User", "User")
                        .WithMany("Licenses")
                        .HasForeignKey("UserRef")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Marriage.Marriage", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.User.User", "User")
                        .WithMany("Marriages")
                        .HasForeignKey("UserRef")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Passport.Passport", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.User.User", "User")
                        .WithMany("Passports")
                        .HasForeignKey("UserRef")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Region.City", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.Region.Country", null)
                        .WithMany("Cities")
                        .HasForeignKey("CountryId");

                    b.HasOne("Twenty_Crm_Domain.Entities.Region.County", "County")
                        .WithMany("Cities")
                        .HasForeignKey("CountyRef")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("County");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Region.County", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.Region.State", "State")
                        .WithMany("Counties")
                        .HasForeignKey("StateRef")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("State");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Region.State", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.Region.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryRef")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Skill.Skill", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.User.User", "User")
                        .WithMany("Skills")
                        .HasForeignKey("UserRef")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Title.Title", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.Company.Company", "Company")
                        .WithOne("Title")
                        .HasForeignKey("Twenty_Crm_Domain.Entities.Title.Title", "CompanyRef")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.User.RoleToClaims", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.User.Claim", "Claim")
                        .WithMany("RoleToClaims")
                        .HasForeignKey("ClaimRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Twenty_Crm_Domain.Entities.User.Role", "Role")
                        .WithMany("RoleToClaims")
                        .HasForeignKey("RoleRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.User.User", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.Religion.Religion", "Religions")
                        .WithMany("Users")
                        .HasForeignKey("ReligionRef");

                    b.HasOne("Twenty_Crm_Domain.Entities.Group.SubGroup", null)
                        .WithMany("User")
                        .HasForeignKey("SubGroupId");

                    b.Navigation("Religions");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.User.UserBodyInformation", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.User.User", "User")
                        .WithMany("UserBodyInformations")
                        .HasForeignKey("UserRef")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.User.UserToRole", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.User.Role", "Role")
                        .WithMany("UserToRole")
                        .HasForeignKey("RoleRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Twenty_Crm_Domain.Entities.User.User", "User")
                        .WithMany("UserToRole")
                        .HasForeignKey("UserRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Website.Website", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.Company.Company", "Company")
                        .WithMany("Websites")
                        .HasForeignKey("CompanyRef")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Twenty_Crm_Domain.Entities.User.User", "User")
                        .WithMany("Websites")
                        .HasForeignKey("UserRef")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.WorkPlace.WorkPlace", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.Company.Company", "Company")
                        .WithMany("WorkPlaces")
                        .HasForeignKey("CompanyRef")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("UserWorkPlace", b =>
                {
                    b.HasOne("Twenty_Crm_Domain.Entities.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Twenty_Crm_Domain.Entities.WorkPlace.WorkPlace", null)
                        .WithMany()
                        .HasForeignKey("WorkPlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Address.Address", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Bank.Bank", b =>
                {
                    b.Navigation("BankBranches");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Bank.BankBranch", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("Telephones");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Company.Company", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CompanyToCustomer");

                    b.Navigation("CompanyToUser");

                    b.Navigation("CustomerToCompany");

                    b.Navigation("Telephones");

                    b.Navigation("Title");

                    b.Navigation("Websites");

                    b.Navigation("WorkPlaces");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Telephone.Operator", b =>
                {
                    b.Navigation("Mobiles");

                    b.Navigation("Telephones");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Group.Group", b =>
                {
                    b.Navigation("SubGroups");

                    b.Navigation("UserToGroups");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Group.SubGroup", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Region.City", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Telephones");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Region.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("States");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Region.County", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Region.State", b =>
                {
                    b.Navigation("Counties");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.Religion.Religion", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.User.Claim", b =>
                {
                    b.Navigation("RoleToClaims");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.User.Role", b =>
                {
                    b.Navigation("RoleToClaims");

                    b.Navigation("UserToRole");
                });

            modelBuilder.Entity("Twenty_Crm_Domain.Entities.User.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("BankAccounts");

                    b.Navigation("GroupLeaders");

                    b.Navigation("InternationalCertificates");

                    b.Navigation("Licenses");

                    b.Navigation("Marriages");

                    b.Navigation("Passports");

                    b.Navigation("Skills");

                    b.Navigation("Telephones");

                    b.Navigation("UserBodyInformations");

                    b.Navigation("UserToGroups");

                    b.Navigation("UserToRole");

                    b.Navigation("Websites");
                });
#pragma warning restore 612, 618
        }
    }
}
